#+TITLE: What Are Computers, Really?
#+AUTHOR: Clarissa Littler
#+EMAIL: clarissa.littler@gmail.com
#+DATE: 6-23-2015
#+OPTIONS: H:2
#+BEAMER_THEME: Madrid
#+LATEX_CLASS: beamer

#+startup: beamer
#+LaTeX_CLASS: beamer
#+LaTeX_CLASS_OPTIONS: [bigger]

#+COLUMNS: %45ITEM %10BEAMER_ENV(Env) %10BEAMER_ACT(Act) %4BEAMER_COL(Col) %8BEAMER_OPT(Opt)

* Outline and Goals
** Fundamental Questions
   + What are the limits of computers? \pause
   + Are there problems a computer can never solve? \pause
   + Do all programming languages describe the same thing? \pause
   + What even *are* programs? 
** How We'll Answer Them
   + Give intuitive criterion for "computability" as finite process \pause
   + Build up a definition of computation independent of computers \pause
   + Sketch out mathematical models of computation \pause
   + Give examples of non-computable problems \pause
   + Discuss the implications and limits of our knowledge of computability
* Computers and Programs
** Computation Sounds Like Computer
   + Computation is what computers do \pause
   + A program /describes/ a computation \pause
   + The limits of computation are limits of *description* \pause 
   + What processes can be *described* in a finite way with a finite *implementation*?
** Examples of Finite Processes
*** Recipe as Finite Process 					    :B_block:
    :PROPERTIES:
    :BEAMER_env: block
    :END:
Cook celery and onion together til soft, then add frozen spinach and cook to get some of the moisture out and reduce volume add broth lentils cilantro and other spices, stir thoroughly, throw bay leaves on top.

Cook for 40 minutes

Turn off heat, wait til it stops bubbling and blend thoroughly.

Cook for 5-10 minutes after blending
** Examples of Finite Processes
*** 								    :B_block:
    :PROPERTIES:
    :BEAMER_env: block
    :END:
Another finite process
*** 								    :B_block:
    :PROPERTIES:
    :BEAMER_env: block
    :END:
file:Directions.png

** Examples of Finite Processes
file:DirectionsScreenshot.png   
** Examples of Finite Processes
file:MetaMetaShot.png
\pause
*** 								    :B_block:
    :PROPERTIES:
    :BEAMER_env: block
    :END:
I'm done with this joke now, I promise.
** Examples of Finite Processes
\pause
*** Adding						      :B_block:BMCOL:
    :PROPERTIES:
    :BEAMER_env: block
    :BEAMER_col: 0.45
    :END:
#+BEGIN_LaTeX
  \begin{align*}
  5 + 10 & = 4 + 11 \\
         & = 3 + 12 \\
         & = 2 + 13 \\
         & = 1 + 14 \\
         & = 0 + 15 \\
         & = 15
  \end{align*} 
#+END_LaTeX
\pause
*** Another Way						      :B_block:BMCOL:
    :PROPERTIES:
    :BEAMER_env: block
    :BEAMER_col: 0.45
    :END:
    #+BEGIN_LaTeX
      \begin{align*}
      5 + 10 & = 6 + 9 \\
             & = 7 + 8 \\
             & = 8 + 7 \\
             & = 9 + 6 \\
             & = 10 + 5 \\
             & = 11 + 4 \\
             & = 12 + 3 \\
             & = 13 + 2 \\
             & = 14 + 1 \\
             & = 15
      \end{align*} 
#+END_LaTeX
** Examples of Finite Processes
*** 							      :B_block:BMCOL:
    :PROPERTIES:
    :BEAMER_env: block
    :BEAMER_col: 0.4
    :END:
							      The following Haskell snippet that evaluates the sum of the integers from 1 to 10 is *also* a finite process
\pause
*** 							      :B_block:BMCOL:
    :PROPERTIES:
    :BEAMER_env: block
    :BEAMER_col: 0.5
    :END:
   #+BEGIN_SRC haskell :exports code :results value
     let f x = sum [1..x] in f 10
   #+END_SRC

   #+RESULTS:
   : 55

** Examples of Finite Processes
   Many more examples exist in the wild including: \pause
   + counting on your fingers \pause
   + long division \pause
   + sorting your vinyl collection with a bucket sort \pause
   + compiling code \pause
* What Makes a Finite Process Finite
** Qualities of Finite Processes
*** 								    :B_block:
    :PROPERTIES:
    :BEAMER_env: block
    :END:
  Informal criterion for a "finite process"
\pause
*** Finite Implementation				      :B_block:BMCOL:
    :PROPERTIES:
    :BEAMER_env: block
    :BEAMER_col: 0.45
    :END:
     + Finite time
     + Finite resources
\pause
*** Finite Description					      :B_block:BMCOL:
    :PROPERTIES:
    :BEAMER_env: block
    :BEAMER_col: 0.45
    :END:
     + Finite length
     + Finite alphabet
** Digression: What Does Finite Mean?
*** Informal Intuition					      :B_block:BMCOL:
    :PROPERTIES:
    :BEAMER_env: block
    :BEAMER_col: 0.45
    :END:
   + A quantity is finite when it is "measurable"
     + Counting 
     + Weighing
     + Timing
*** Examples						      :B_block:BMCOL:
    :PROPERTIES:
    :BEAMER_env: block
    :BEAMER_col: 0.45
    :END:
     \pause
    + how massive our Sun is \pause
    + the distance between planets \pause
    + the number of lines of code in your program \pause
    + the number of words in this talk \pause
    + number of other talks you'd rather be at
** Finite Time
*** 								    :B_block:
    :PROPERTIES:
    :BEAMER_env: block
    :END:
  Finite process produces *output* in finite time \pause
*** Examples of Finite Time				      :B_block:BMCOL:
    :PROPERTIES:
    :BEAMER_env: block
    :BEAMER_col: 0.45
    :END:
   + Counting on your fingers
   + Sorting vinyl
   + Walking to a friend's house
   + Boiling ramen
\pause
*** 								      :BMCOL:
    :PROPERTIES:
    :BEAMER_col: 0.45
    :END:
**** Why Finite Time?						    :B_block:
     :PROPERTIES:
     :BEAMER_env: block
     :END:
    Only actions taking *finite* time can actually be finished because that's how our universe works.
\pause
**** Produce Output?						    :B_block:
     :PROPERTIES:
     :BEAMER_env: block
     :END:
     + Some finite processes run forever \pause
       + Operating systems \pause
       + Servers \pause
       + Interactive programs
** Finite Resources
*** 								    :B_block:
    :PROPERTIES:
    :BEAMER_env: block
    :END:
    Finite processes only use finite resources
*** Examples of Resources				      :B_block:BMCOL:
    :PROPERTIES:
    :BEAMER_env: block
    :BEAMER_col: 0.45
    :END:
     + scratch paper
     + materials
     + RAM 
     + disk space
*** Why Finite Resources				      :B_block:BMCOL:
    :PROPERTIES:
    :BEAMER_env: block
    :BEAMER_col: 0.45
    :END:
   No computer and no *physical process* that we know of can use an infinite quantity, thus infinite resources shouldn't be allowed in computation.
** Finite Descriptions
*** 								    :B_block:
    :PROPERTIES:
    :BEAMER_env: block
    :END:
 Finite processes are only allowed to have a finite number of steps in their description, i.e. a finite length as a string
*** Examples of Finite Descriptions			      :B_block:BMCOL:
    :PROPERTIES:
    :BEAMER_env: block
    :BEAMER_col: 0.45
    :END:
     + Directions
     + Recipes
     + *Programs*
       + a ~while~ loop is finite!
*** Why Finite Directions?				      :B_block:BMCOL:
    :PROPERTIES:
    :BEAMER_env: block
    :BEAMER_col: 0.45
    :END:
    Any process that has an infinite number of steps in its description would: \pause
    + take necessarily infinite time to process and run
      + not *absolutely* a bad thing, but likely so
    + take infinite *resources* to store
      + this is *absolutely* bad
** Finite Alphabet
*** 								    :B_block:
    :PROPERTIES:
    :BEAMER_env: block
    :END:
    Finite processes can only be written with a finite alphabet 
*** Examples of Alphabets				      :B_block:BMCOL:
    :PROPERTIES:
    :BEAMER_env: block
    :BEAMER_col: 0.45
    :END:
    + 0 and 1
    + the English alphabet (a-z, A-Z)
    + unicode
    + ASCII
*** Why a Finite Alphabet?				      :B_block:BMCOL:
    :PROPERTIES:
    :BEAMER_env: block
    :BEAMER_col: 0.45
    :END:
    An infinite alphabet can't have an implementation that is, itself, a finite process.
** What Next?
*** A Block						     :BMCOL:
    :PROPERTIES:
    :BEAMER_env: column
    :BEAMER_col: 0.6
    :END:      
   + These are rules of thumb
   + But how do we *actually* specify a process?
   + Most directions too broad: 
     + driving directions
     + cooking directions
   + Need instructions simple enough for a machine 
*** Images 							      :BMCOL:
    :PROPERTIES:
    :BEAMER_col: 0.3
    :END:
    file:howtodraw.jpg
** Modelling Computation
*** What Is a Model? 						    :B_block:
    :PROPERTIES:
    :BEAMER_env: block
    :END:
A model of computation is a mathematically precise formulation of computation. \pause
*** What's in A Model?						    :B_block:
    :PROPERTIES:
    :BEAMER_env: block
    :END:
    + a rigorous way to describe computation \pause
    + a way to *perform* the descriptions
 
* Models of Computation
** The Search for a Model
   + 1930s logicians searched for theorem proving algorithms \pause
     + Proofs in 1st order logic \pause
     + The decision problem \pause
   + Needed a model of computation to prove if needed computation could exist \pause
   + Turing won the race!
** Turing and His Automatic Machines
   + Turing's 1936 paper "On Computable Numbers, with an Application to the [Decision Problem]" cite:turing1936computable \pause
   + Automatic machines weren't *actually* stand-ins for modern computers \pause
   + Turing was inspired by *human* computers
** Human Computers
   + Turing's day computers were people \pause
     + Actually, they were mostly women cite:grier2013computers \pause
   + Computers worked on \pause
     + Physics simulations \pause
     + Scientific research \pause
     + Firing tables
** How Humans Compute
*** An Example						      :B_block:BMCOL:
    :PROPERTIES:
    :BEAMER_env: block
    :BEAMER_col: 0.45
    :END:
    file:Addition.jpg 
\pause
*** How We Think					      :B_block:BMCOL:
    :PROPERTIES:
    :BEAMER_col: 0.45
    :BEAMER_env: block
    :END:
    + Finite scratch paper \pause
    + Finite steps \pause
    + You can look at it and pick up where I left off \pause
    + Only requires a finite number of brain states to perform
** A Turing Machine
*** 								      :BMCOL:
    :PROPERTIES:
    :BEAMER_col: 0.5
    :END:
   + Arbitrary amount of tape
   + Reads and writes from only once cell at a time
   + Only has a finite "alphabet" of symbols
   + Has a finite number of states for deciding next move
*** Image							      :BMCOL:
    :PROPERTIES:
    :BEAMER_col: 0.4
    :END:
    file:headLg.jpg
    Courtesy of [[http://aturingmachine.com/hardware.php]]
** Historic Importance of Turing Machines   
   + Church's lambda calculus was *slightly* first cite:church1936unsolvable \pause
     + Mere months! \pause
   + The lambda calculus wasn't *obviously* computable \pause
   + Turing's machines are obviously computable \pause
     + Completely analogous to human processes  
** The Church-Turing Thesis
*** Original Formulation 				      :B_block:BMCOL:
    :PROPERTIES:
    :BEAMER_col: 0.45
    :BEAMER_env: block
    :END:
   There is no model of computation more expressive than Turing machines (equivalently, the lambda calculus). cite:kleene1952introduction
*** Equivalent Formulation 				      :B_block:BMCOL:
    :PROPERTIES:
    :BEAMER_col: 0.45
    :BEAMER_env: block
    :END:
    Equivalent formulation: no programming language can be more powerful than a Turing machine
** Programs As Computations
   + A programming *language* is a model of computation \pause
   + A program a *description* of a computation \pause
   + An interpreter/compiler is the *implementation* of the description \pause
   + The real meaning of Turing Complete
* Unsolvable Problems
** The Halting Problem
*** Formal Specification				      :B_block:BMCOL:
    :PROPERTIES:
    :BEAMER_env: block
    :BEAMER_col: 0.45
    :END:      
    Is there a Turing machine that, when fed the description of another Turing machine, determines if that machine will halt on a given input? \pause
*** Informal Implication				      :B_block:BMCOL:
    :PROPERTIES:
    :BEAMER_env: block
    :BEAMER_col: 0.45
    :END:
   Can you write a program that can detect if other programs have infinite loops?
** Why Can't We Solve The Halting Problem?
*** Liar's Paradox					      :B_block:BMCOL:
    :PROPERTIES:
    :BEAMER_env: block
    :BEAMER_col: 0.45
    :END:
    file:Liarbot.jpg
*** Proof Idea						      :B_block:BMCOL:
    :PROPERTIES:
    :BEAMER_env: block
    :BEAMER_col: 0.45
    :END:
    + Assume we have a program that can solve the halting problem \pause
    + Use it to make a liar-compiler that \pause
      + loops if the input program halts when fed its own source code
      + halts if the input program loops when fed its own source code \pause
    + What does the liar say about itself?
** Virus Scanners
*** Full Employment Theorem				      :B_block:BMCOL:
    :PROPERTIES:
    :BEAMER_env: block
    :BEAMER_col: 0.45
    :END:
    Is there a program that can perfectly detect if another program is carrying a viral payload? \pause
*** No!							      :B_block:BMCOL:
    :PROPERTIES:
    :BEAMER_env: block
    :BEAMER_col: 0.45
    :END:
    file:Scanbot.jpg
\pause
    Why not?
** Rice's Theorem
*** Semi-Formally 					      :B_block:BMCOL:
    :PROPERTIES:
    :BEAMER_env: block
    :BEAMER_col: 0.45
    :END:
    Non-trivial properties of all programs
* The Legacy of Church-Turing
** Church-Turing as Physics
*** Strong Church-Turing Thesis					    :B_block:
    :PROPERTIES:
    :BEAMER_env: block
    :END:
   The laws of physics are inherently computable and there is no physical process that cannot be computed by some algorithm.
*** 								    :B_block:
    :PROPERTIES:
    :BEAMER_env: block
    :END:
   + is this actually true? \pause
   + we literally have no idea! \pause
   + strong Church-Turing thesis has major implications for physics \pause
     + reality must be "discrete" \pause
     + real numbers are approximations at scale
** Church-Turing as Cognition
   + Are brains computable? \pause
   + Currently an unknown question \pause
   + Does free will actually exist or is it an illusion?
** Is Strong AI Possible?
*** 							      :B_block:BMCOL:
    :PROPERTIES:
    :BEAMER_env: block
    :BEAMER_col: 0.45
    :END:
   + Can we make a machine intelligence comparable to our own? \pause
   + Is human intelligence computable? \pause
   + Science fiction assumes so! \pause
   + Deep philosophic and physical implications \pause
*** 								      :BMCOL:
    :PROPERTIES:
    :BEAMER_col: 0.45
    :END:
  file:Livebot.jpg
** Skirting Computability
*** Goedel's Way					      :B_block:BMCOL:
    :PROPERTIES:
    :BEAMER_env: block
    :BEAMER_col: 0.4
    :END:
  file:gway.jpg
*** Hyper-Turing Computation				      :B_block:BMCOL:
    :PROPERTIES:
    :BEAMER_env: block
    :BEAMER_col: 0.45
    :END:
   + Is computation (in the Church-Turing sense) complete? \pause
   + Is physics computable? \pause
     + If yes, then no \pause
     + If no, then *maybe* cite:chaitin2011godel \pause
   + Hyper-Turing computation
* Finale
** In Conclusion
   + Computation is a thing that exists outside computers \pause
   + The mathematics of finite methods \pause
   + Computation has *limits* \pause
   + The limits of computation are understood \pause
   + How computation relates to the laws of the universe? \pause
     + Much more unknown
** Any Questions?
** Bibliography
\bibliography{references}
\bibliographystyle{plain}
